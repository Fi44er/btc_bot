package bot

import (
	"context"
	"fmt"
	"strconv"
	"strings"

	"github.com/Fi44er/btc_bot/internal/models"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

const (
	withdrawalsPerPage  = 5
	adminCommissionRate = 0.06
)

func applyAdminCommission(amount float64) float64 {
	return amount * (1 - adminCommissionRate)
}

// --- –õ–æ–≥–∏–∫–∞ –≤—ã–≤–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---

func (b *Bot) handleWithdrawRequest(ctx context.Context, chatID int64, user *models.User) {
	if user.Balance <= 0 {
		b.sendMessage(chatID, "‚ùå –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞.", GetMainMenu(user))
		return
	}
	msg := fmt.Sprintf(
		"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: `%.8f` RUB\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:",
		user.Balance,
	)
	b.setState(user.TelegramID, stateAwaitingWithdrawAmount)
	b.sendMessage(chatID, msg, tgbotapi.NewRemoveKeyboard(true))
}

func (b *Bot) handleWithdrawAmount(ctx context.Context, chatID int64, user *models.User, text string) {
	amountToAdd, err := strconv.ParseFloat(strings.Replace(text, ",", ".", -1), 64)
	if err != nil || amountToAdd <= 0 {
		b.sendMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.", tgbotapi.NewRemoveKeyboard(true))
		return
	}
	existingWithdrawal, err := b.service.GetPendingWithdrawalByUserID(ctx, user.TelegramID)
	if err != nil {
		b.logger.Errorf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–∂–∏–¥–∞—é—â–µ–≥–æ –≤—ã–≤–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", user.TelegramID, err)
		b.sendMessage(chatID, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", GetMainMenu(user))
		return
	}
	var pendingAmount float64
	if existingWithdrawal != nil {
		pendingAmount = existingWithdrawal.Amount
	}
	availableBalance := user.Balance - pendingAmount
	if amountToAdd > availableBalance {
		b.setState(user.TelegramID, stateDefault)
		errorMsg := fmt.Sprintf(
			"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ –≤—ã–≤–æ–¥—É.\n\n"+
				"–í–∞—à –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å: `%.8f` RUB\n"+
				"–£–∂–µ –≤ –∑–∞—è–≤–∫–µ –Ω–∞ –≤—ã–≤–æ–¥: `%.8f` RUB\n"+
				"----------------------------------\n"+
				"*–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞: `%.8f` RUB*\n\n"+
				"–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ `%.8f` RUB, —á—Ç–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π –ª–∏–º–∏—Ç.",
			user.Balance, pendingAmount, availableBalance, amountToAdd,
		)
		b.sendMessage(chatID, errorMsg, GetMainMenu(user))
		return
	}
	b.setUserActionData(user.TelegramID, text)
	b.setState(user.TelegramID, stateDefault)
	msg := fmt.Sprintf(
		"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:\n\n‚û°Ô∏è –î–æ–±–∞–≤–∏—Ç—å –∫ –≤—ã–≤–æ–¥—É: `%.8f RUB`\nüí≥ –ù–∞ –∫–∞—Ä—Ç—É: `%s`",
		amountToAdd, user.CardNumber,
	)
	confirmKeyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "confirm_withdraw"),
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "cancel_withdraw"),
		),
	)
	b.sendMessage(chatID, msg, confirmKeyboard)
}

func (b *Bot) handleUserWithdrawCallback(ctx context.Context, callback *tgbotapi.CallbackQuery, user *models.User) {
	chatID := callback.Message.Chat.ID
	b.answerCallback(callback.ID, "")
	editMarkup := tgbotapi.NewEditMessageReplyMarkup(chatID, callback.Message.MessageID, tgbotapi.InlineKeyboardMarkup{})
	b.API.Send(editMarkup)
	switch callback.Data {
	case "confirm_withdraw":
		amountStr := b.getUserActionData(user.TelegramID)
		b.clearUserActionData(user.TelegramID)
		amountToAdd, err := strconv.ParseFloat(strings.Replace(amountStr, ",", ".", -1), 64)
		if err != nil {
			b.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—É–º–º—ã.", GetMainMenu(user))
			return
		}
		deltaWithdrawal := &models.Withdrawal{
			UserID:     user.TelegramID,
			CardNumber: user.CardNumber,
			Amount:     amountToAdd,
		}
		finalWithdrawal, isUpdate, err := b.service.CreateOrUpdateWithdrawal(ctx, deltaWithdrawal)
		if err != nil {
			b.logger.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—ã–≤–æ–¥–∞: %v", err)
			b.sendMessage(chatID, "‚ùå "+err.Error(), GetMainMenu(user))
			return
		}
		if isUpdate {
			b.sendMessage(chatID, fmt.Sprintf("‚úÖ –í–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω. –ù–æ–≤–∞—è —Å—É–º–º–∞: `%.8f` RUB.", finalWithdrawal.Amount), GetMainMenu(user))
			b.notifyAdminAboutUpdatedWithdrawal(finalWithdrawal, amountToAdd)
		} else {
			b.sendMessage(chatID, fmt.Sprintf("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ `%.8f` RUB —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É.", finalWithdrawal.Amount), GetMainMenu(user))
			b.notifyAdminAboutWithdrawal(finalWithdrawal)
		}
	case "cancel_withdraw":
		b.clearUserActionData(user.TelegramID)
		b.sendMessage(chatID, "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", GetMainMenu(user))
	}
}

// --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ê–¥–º–∏–Ω–∞ (—Å –∫–æ–º–∏—Å—Å–∏–µ–π) ---

func (b *Bot) notifyAdminAboutWithdrawal(withdrawal *models.Withdrawal) {
	amountToPay := applyAdminCommission(withdrawal.Amount)
	msg := fmt.Sprintf(
		"üÜï –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ #%d\n\n"+
			"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `%d`\n"+
			"üí≥ –ö–∞—Ä—Ç–∞: `%s`\n"+
			"üí∞ –°—É–º–º–∞ –∫ –≤—ã–ø–ª–∞—Ç–µ: `%.8f` RUB (–∑–∞–ø—Ä–æ—à–µ–Ω–æ: `%.8f` RUB)",
		withdrawal.ID,
		withdrawal.UserID,
		withdrawal.CardNumber,
		amountToPay,
		withdrawal.Amount,
	)
	adminMsg := tgbotapi.NewMessage(b.config.AdminChatID, msg)
	adminMsg.ParseMode = tgbotapi.ModeMarkdown
	b.API.Send(adminMsg)
}

func (b *Bot) notifyAdminAboutUpdatedWithdrawal(withdrawal *models.Withdrawal, addedAmount float64) {
	adjustedAdded := applyAdminCommission(addedAmount)
	adjustedTotal := applyAdminCommission(withdrawal.Amount)
	msg := fmt.Sprintf(
		"üîÑ –°—É–º–º–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ #%d –æ–±–Ω–æ–≤–ª–µ–Ω–∞\n\n"+
			"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `%d`\n"+
			"üí≥ –ö–∞—Ä—Ç–∞: `%s`\n\n"+
			"üí∞ –î–æ–±–∞–≤–ª–µ–Ω–æ –∫ –≤—ã–ø–ª–∞—Ç–µ: `%.8f` RUB\n"+
			"üí∞ *–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –∫ –≤—ã–ø–ª–∞—Ç–µ: `%.8f` RUB*",
		withdrawal.ID,
		withdrawal.UserID,
		withdrawal.CardNumber,
		adjustedAdded,
		adjustedTotal,
	)
	adminMsg := tgbotapi.NewMessage(b.config.AdminChatID, msg)
	adminMsg.ParseMode = tgbotapi.ModeMarkdown
	b.API.Send(adminMsg)
}

// --- –õ–æ–≥–∏–∫–∞ –≤—ã–≤–æ–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ (–ë–ï–ó –æ–±—â–µ–π —Å—É–º–º—ã) ---

func (b *Bot) handleWithdrawalRequests(ctx context.Context, chatID int64, user *models.User) {
	withdrawals, err := b.service.GetPendingWithdrawals(ctx)
	if err != nil {
		b.logger.Errorf("Failed to get pending withdrawals: %v", err)
		b.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—ã–≤–æ–¥", nil)
		return
	}
	if len(withdrawals) == 0 {
		b.sendMessage(chatID, "‚ÑπÔ∏è –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—ã–≤–æ–¥.", nil)
		return
	}
	// –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –±–µ–∑ –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±—â–µ–π —Å—É–º–º—ã
	b.sendWithdrawalsPage(ctx, chatID, withdrawals, 0)
}

func (b *Bot) sendWithdrawalsPage(ctx context.Context, chatID int64, withdrawals []*models.Withdrawal, page int) {
	start := page * withdrawalsPerPage
	if start >= len(withdrawals) {
		start = 0
		page = 0
	}
	end := start + withdrawalsPerPage
	if end > len(withdrawals) {
		end = len(withdrawals)
	}
	var sb strings.Builder
	sb.WriteString(fmt.Sprintf("üìã –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—ã–≤–æ–¥ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ %d –∏–∑ %d):\n\n", page+1, (len(withdrawals)-1)/withdrawalsPerPage+1))

	for i := start; i < end; i++ {
		w := withdrawals[i]
		amountToPay := applyAdminCommission(w.Amount)
		sb.WriteString(fmt.Sprintf(
			"üÜî ID: %d\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %d\nüí≥ –ö–∞—Ä—Ç–∞: %s\nüí∞ –°—É–º–º–∞ –∫ –≤—ã–ø–ª–∞—Ç–µ: `%.8f` RUB\n\n",
			w.ID,
			w.UserID,
			w.CardNumber,
			amountToPay,
		))
	}
	keyboardRows := make([][]tgbotapi.InlineKeyboardButton, 0)
	for i := start; i < end; i++ {
		w := withdrawals[i]
		btn := tgbotapi.NewInlineKeyboardButtonData(
			fmt.Sprintf("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–≤–æ–¥ #%d", w.ID),
			fmt.Sprintf("admin_confirm_withdraw:%d", w.ID),
		)
		keyboardRows = append(keyboardRows, tgbotapi.NewInlineKeyboardRow(btn))
	}
	if len(withdrawals) > withdrawalsPerPage {
		paginationRow := make([]tgbotapi.InlineKeyboardButton, 0)
		if page > 0 {
			paginationRow = append(paginationRow, tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", fmt.Sprintf("admin_withdraw_page:%d", page-1)))
		}
		if end < len(withdrawals) {
			paginationRow = append(paginationRow, tgbotapi.NewInlineKeyboardButtonData("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", fmt.Sprintf("admin_withdraw_page:%d", page+1)))
		}
		if len(paginationRow) > 0 {
			keyboardRows = append(keyboardRows, paginationRow)
		}
	}
	msg := tgbotapi.NewMessage(chatID, sb.String())
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(keyboardRows...)
	b.API.Send(msg)
}

func (b *Bot) handleAdminWithdrawCallback(ctx context.Context, callback *tgbotapi.CallbackQuery) {
	data := callback.Data

	if strings.HasPrefix(data, "admin_withdraw_page:") {
		page, err := strconv.Atoi(strings.TrimPrefix(data, "admin_withdraw_page:"))
		if err != nil {
			b.logger.Errorf("Invalid page number in callback: %v", err)
			return
		}

		withdrawals, err := b.service.GetPendingWithdrawals(ctx)
		if err != nil {
			b.logger.Errorf("Failed to get pending withdrawals: %v", err)
			return
		}

		b.sendWithdrawalsPage(ctx, callback.Message.Chat.ID, withdrawals, page)
		b.answerCallback(callback.ID, "")
		return
	}

	if strings.HasPrefix(data, "admin_confirm_withdraw:") {
		withdrawID, err := strconv.ParseInt(strings.TrimPrefix(data, "admin_confirm_withdraw:"), 10, 64)
		if err != nil {
			b.logger.Errorf("Invalid withdrawal ID in callback: %v", err)
			return
		}

		confirmText := "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —ç—Ç–æ—Ç –≤—ã–≤–æ–¥? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ."
		confirmKeyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"‚úÖ –î–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
					fmt.Sprintf("admin_final_confirm_withdraw:%d", withdrawID),
				),
				tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∞", "admin_cancel_action"),
			),
		)

		edit := tgbotapi.NewEditMessageTextAndMarkup(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			confirmText,
			confirmKeyboard,
		)
		b.API.Send(edit)
		b.answerCallback(callback.ID, "")
		return
	}

	if strings.HasPrefix(data, "admin_final_confirm_withdraw:") {
		withdrawID, err := strconv.ParseInt(strings.TrimPrefix(data, "admin_final_confirm_withdraw:"), 10, 64)
		if err != nil {
			b.logger.Errorf("Invalid withdrawal ID in callback: %v", err)
			return
		}

		err = b.processWithdrawal(ctx, withdrawID)
		if err != nil {
			b.logger.Errorf("Failed to process withdrawal %d: %v", withdrawID, err)
			b.answerCallback(callback.ID, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–≤–æ–¥–∞: "+err.Error())
			return
		}

		deleteMsg := tgbotapi.NewDeleteMessage(callback.Message.Chat.ID, callback.Message.MessageID)
		b.API.Send(deleteMsg)
		b.answerCallback(callback.ID, "‚úÖ –í—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ —É–¥–∞–ª–µ–Ω.")
		return
	}

	if data == "admin_cancel_action" {
		edit := tgbotapi.NewEditMessageText(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			"‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
		)
		b.API.Send(edit)
		b.answerCallback(callback.ID, "")
	}
}

func (b *Bot) processWithdrawal(ctx context.Context, withdrawID int64) error {
	withdrawal, err := b.service.GetWithdrawalByID(ctx, withdrawID)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫—É: %v", err)
	}
	if withdrawal == nil {
		return fmt.Errorf("–∑–∞—è–≤–∫–∞ #%d –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞)", withdrawID)
	}
	if withdrawal.Status != "pending" {
		return fmt.Errorf("–∑–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ (—Å—Ç–∞—Ç—É—Å: %s)", withdrawal.Status)
	}

	user, err := b.service.GetUser(ctx, withdrawal.UserID)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
	}
	if user == nil {
		return fmt.Errorf("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
	}

	if user.Balance < withdrawal.Amount {
		b.sendMessage(b.config.AdminChatID, fmt.Sprintf("‚ÄºÔ∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞ #%d. –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %.8f RUB, —Ç—Ä–µ–±—É–µ—Ç—Å—è: %.8f RUB.", withdrawID, user.Balance, withdrawal.Amount), nil)
		return fmt.Errorf("–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
	}

	newBalance := user.Balance - withdrawal.Amount
	err = b.service.UpdateUserBalance(ctx, user.TelegramID, newBalance)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
	}

	err = b.service.DeleteWithdrawal(ctx, withdrawID)
	if err != nil {
		b.logger.Errorf("CRITICAL: User balance updated for withdrawal %d, but failed to delete the withdrawal record: %v", withdrawID, err)
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: %v", err)
	}

	userMsg := fmt.Sprintf(
		"‚úÖ –í–∞—à –≤—ã–≤–æ–¥ –Ω–∞ —Å—É–º–º—É `%.8f` RUB (–∫–∞—Ä—Ç–∞ `%s`) —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!",
		withdrawal.Amount,
		withdrawal.CardNumber,
	)

	user.Balance = newBalance
	b.sendMessage(user.TelegramID, userMsg, GetMainMenu(user))

	return nil
}

func (b *Bot) answerCallback(callbackID string, text string) {
	callback := tgbotapi.NewCallback(callbackID, text)
	if _, err := b.API.Request(callback); err != nil {
		b.logger.Errorf("Failed to answer callback: %v", err)
	}
}
