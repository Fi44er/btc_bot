package bot

import (
	"context"
	"sync"

	"github.com/Fi44er/btc_bot/config"
	"github.com/Fi44er/btc_bot/internal/models"
	"github.com/Fi44er/btc_bot/utils"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type IService interface {
	GetUser(ctx context.Context, userID int64) (*models.User, error)
	CreateUser(ctx context.Context, userID int64) error
	UpdateCardNumber(ctx context.Context, userID int64, cardNumber string) error
	HandleCheckTransactions(ctx context.Context, userID int64, _ models.NotifyCallback) (float64, error)
	GetAdminChatID() int64

	UpdateUserWallet(ctx context.Context, telegramID int64) (*models.User, error)
	GetBTCRUBRate() (float64, error)

	GetWalletByID(ctx context.Context, id int64) (*models.SystemWallet, error)

	GetPendingWithdrawals(ctx context.Context) ([]*models.Withdrawal, error)
	GetWithdrawalByID(ctx context.Context, id int64) (*models.Withdrawal, error)
	UpdateWithdrawalStatus(ctx context.Context, id int64, status string) error

	GetPendingWithdrawalByUserID(ctx context.Context, userID int64) (*models.Withdrawal, error)

	// –ù–û–í–´–ô –ú–ï–¢–û–î: –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –æ –≤—ã–≤–æ–¥–µ –ø–æ ID
	DeleteWithdrawal(ctx context.Context, id int64) error

	UpdateUserBalance(ctx context.Context, userID int64, newBalance float64) error
	CreateOrUpdateWithdrawal(ctx context.Context, withdrawal *models.Withdrawal) (*models.Withdrawal, bool, error)
}

type Bot struct {
	API        *tgbotapi.BotAPI
	service    IService
	logger     *utils.Logger
	config     *config.Config
	stateMutex *sync.Mutex
	// –ö–∞—Ä—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–∞—Ä—Ç—ã")
	userStates map[int64]string
	// –ö–∞—Ä—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞)
	userActionData map[int64]string
}

func NewBot(
	api *tgbotapi.BotAPI,
	service IService,
	logger *utils.Logger,
	config *config.Config,
) *Bot {
	return &Bot{
		API:            api,
		service:        service,
		logger:         logger,
		config:         config,
		stateMutex:     &sync.Mutex{},
		userStates:     make(map[int64]string),
		userActionData: make(map[int64]string),
	}
}

func (b *Bot) Start() {
	b.logger.Info("Starting bot...")
	updates := b.API.GetUpdatesChan(tgbotapi.NewUpdate(0))
	for update := range updates {
		b.logger.Debugf("Received update: %+v", update)
		if update.CallbackQuery != nil {
			b.handleCallbackQuery(update.CallbackQuery)
			continue
		}
		if update.Message != nil {
			b.HandleUpdate(update)
		}
	}
}

func GetMainMenu(user *models.User) tgbotapi.ReplyKeyboardMarkup {
	hasCard := user.CardNumber != ""
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ isAdmin –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∞ –Ω–µ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–π ID
	isAdmin := user.IsAdmin

	// –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ä—Ç—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–≤–æ–¥–∞ –∫–∞—Ä—Ç—ã
	if !hasCard {
		return tgbotapi.NewReplyKeyboard(
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton("üí≥ –£–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã"),
			),
		)
	}

	// –ü–æ–ª–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–∞—Ä—Ç–æ–π
	rows := [][]tgbotapi.KeyboardButton{
		{
			tgbotapi.NewKeyboardButton("üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å"),
			tgbotapi.NewKeyboardButton("üí≥ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã"),
		},
		{
			tgbotapi.NewKeyboardButton("üí∏ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞"),
			tgbotapi.NewKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"),
		},
		{
			tgbotapi.NewKeyboardButton("üí∞ –ü–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"),
		},
	}

	if isAdmin {
		rows = append(rows, []tgbotapi.KeyboardButton{
			tgbotapi.NewKeyboardButton("üë®‚Äçüíª –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—ã–≤–æ–¥"),
		})
	}

	return tgbotapi.NewReplyKeyboard(rows...)
}
