package bot

import (
	"context"
	"fmt"
	"strconv"
	"strings"

	"github.com/Fi44er/btc_bot/internal/models"
	"github.com/Fi44er/btc_bot/utils"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func (b *Bot) HandleUpdate(update tgbotapi.Update) {
	b.withUserCheck(func(ctx context.Context, update tgbotapi.Update, user *models.User) {
		text := update.Message.Text
		chatID := update.Message.Chat.ID
		userID := user.TelegramID

		b.logger.Infof("Processing message from user %d: %s", userID, text)

		userState := b.getUserState(userID)

		switch userState {
		case stateAwaitingCardNumber:
			b.handleCardNumberInput(ctx, update, user)
			return
		case stateAwaitingWithdrawConfirmationAmount:
			b.handleWithdrawConfirmation(ctx, chatID, user, text)
			return
		case stateAwaitingAdminNickname:
			b.handleAdminNicknameInput(ctx, chatID, text)
			return
		}

		switch text {
		case "/start":
			b.handleStart(ctx, chatID, user)
		case "üí∞ –ü–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è":
			b.handleAddressRequest(ctx, chatID, user)
		case "üí≥ –£–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã", "üí≥ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã":
			b.setState(userID, stateAwaitingCardNumber)
			b.sendMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã:", tgbotapi.NewRemoveKeyboard(true))
		case "üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å":
			b.handleBalanceRequest(ctx, chatID, user)
		case "‚úÖ –ü—Ä–∏—à–ª–æ –Ω–∞ –∫–∞—Ä—Ç—É":
			b.handleWithdrawRequest(ctx, chatID, user)
		default:
			b.sendMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.", GetMainMenu(user))
		}
	})(update)
}

func (b *Bot) handleStart(ctx context.Context, chatID int64, user *models.User) {
	welcomeText := "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º."
	b.sendMessage(chatID, welcomeText, GetMainMenu(user))
}

func (b *Bot) handleAddressRequest(ctx context.Context, chatID int64, user *models.User) {
	if user.CardNumber == "" {
		b.sendMessage(
			chatID,
			"‚ùå –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã.",
			GetMainMenu(user),
		)
		return
	}

	userWithAddress, err := b.service.UpdateUserWallet(ctx, user.TelegramID)
	if err != nil {
		b.logger.Errorf("Failed to get user address: %v", err)
		b.sendMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", GetMainMenu(user))
		return
	}

	msgText := fmt.Sprintf(
		"–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:\n\n`%s`\n\n"+
			"–õ—é–±–æ–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ BTC –Ω–∞ –Ω–µ–≥–æ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª–µ–Ω–æ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ —Å–µ—Ç–∏.",
		userWithAddress.SystemWallet.Address,
	)
	b.sendMessage(chatID, msgText, GetMainMenu(userWithAddress))
}

func (b *Bot) handleCallbackQuery(callback *tgbotapi.CallbackQuery) {
	ctx := context.Background()
	if !b.isAdmin(callback.From.ID) {
		b.answerCallback(callback.ID, "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
		return
	}

	if strings.HasPrefix(callback.Data, "contact_user:") {
		b.handleContactUserCallback(ctx, callback)
	}
}

func (b *Bot) handleCardNumberInput(ctx context.Context, update tgbotapi.Update, user *models.User) {
	chatID := update.Message.Chat.ID
	userID := user.TelegramID
	cardNumber := update.Message.Text

	if err := b.service.UpdateCardNumber(ctx, userID, cardNumber); err != nil {
		b.logger.Errorf("Failed to update card number: %v", err)
		b.sendMessage(chatID, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", GetMainMenu(user))
		return
	}

	b.setState(userID, stateDefault)
	user.CardNumber = cardNumber
	b.sendMessage(chatID, "‚úÖ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", nil)
	b.sendMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é:", GetMainMenu(user))
}

func (b *Bot) handleBalanceRequest(_ context.Context, chatID int64, user *models.User) {
	balance := utils.RoundTo(user.Balance, 2)
	msgText := fmt.Sprintf("–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: %.2f RUB", balance)
	b.sendMessage(chatID, msgText, GetMainMenu(user))
}

func (b *Bot) handleContactUserCallback(ctx context.Context, callback *tgbotapi.CallbackQuery) {
	adminID := callback.From.ID
	parts := strings.Split(strings.TrimPrefix(callback.Data, "contact_user:"), ":")
	if len(parts) != 1 {
		b.logger.Errorf("Invalid callback data for contact_user: %s", callback.Data)
		b.answerCallback(callback.ID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.")
		return
	}
	targetUserIDStr := parts[0]

	b.setUserActionData(adminID, targetUserIDStr)
	b.setState(adminID, stateAwaitingAdminNickname)

	edit := tgbotapi.NewEditMessageReplyMarkup(callback.Message.Chat.ID, callback.Message.MessageID, tgbotapi.InlineKeyboardMarkup{})
	b.API.Send(edit)

	msgText := "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, @my\\_nickname), —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
	b.sendMessage(adminID, msgText, tgbotapi.NewRemoveKeyboard(true))
	b.answerCallback(callback.ID, "")
}

func (b *Bot) handleAdminNicknameInput(ctx context.Context, adminChatID int64, nickname string) {
	targetUserIDStr := b.getUserActionData(adminChatID)
	targetUserID, err := strconv.ParseInt(targetUserIDStr, 10, 64)
	if err != nil {
		b.logger.Errorf("Failed to parse target user ID from action data: %v", err)
		return
	}

	b.clearUserActionData(adminChatID)
	b.setState(adminChatID, stateDefault)

	markdownEscaper := strings.NewReplacer(
		"_", "\\_", "*", "\\*", "[", "\\[", "]", "\\]",
		"(", "\\(", ")", "\\)", "~", "\\~", "`", "\\`",
		">", "\\>", "#", "\\#", "+", "\\+", "-", "\\-",
		"=", "\\=", "|", "\\|", "{", "\\{", "}", "\\}",
		".", "\\.", "!", "\\!",
	)
	safeNickname := markdownEscaper.Replace(nickname)

	userMsg := fmt.Sprintf(
		"üîµ –î–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: %s\n\n"+
			"–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –∫–∞—Ä—Ç—É, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–≤–æ–¥' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.",
		safeNickname,
	)

	user, err := b.service.GetUser(ctx, targetUserID)
	if err != nil {
		b.logger.Errorf("Could not get user %d to send admin contact: %v", targetUserID, err)
		b.sendMessage(adminChatID, fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.", targetUserID), nil)
		return
	}
	b.sendMessage(targetUserID, userMsg, GetMainMenu(user))

	adminConfirmMsg := fmt.Sprintf("‚úÖ –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (%s) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d.", safeNickname, targetUserID)
	b.sendMessage(adminChatID, adminConfirmMsg, nil)
}
