package bot

import (
	"context"
	"fmt"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func (b *Bot) HandleUpdate(update tgbotapi.Update) {
	ctx := context.Background()
	userID := update.Message.From.ID
	chatID := update.Message.Chat.ID
	text := update.Message.Text

	user, err := b.userService.GetUser(ctx, userID)
	if err != nil {
		b.logger.Errorf("Failed to get user: %v", err)
		return
	}

	hasAddress := user != nil && user.DepositAddress != ""

	userState := b.getUserState(userID)

	if userState == stateAwaitingCardNumber {
		b.HandleCardNumberInput(ctx, update)
		return
	}

	switch text {
	case "/test_tx":
		b.handleTestTransaction(update.Message.Chat.ID, update.Message.From.ID)
	case "/start":
		b.handleStart(ctx, chatID, userID, hasAddress)

	case "üí∞ –ü–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è":
		b.handleAddressRequest(ctx, chatID, userID)

	case "üí≥ –£–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã":
		b.setState(userID, stateAwaitingCardNumber)
		msg := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã:")
		msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
		b.API.Send(msg)

	case "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏":
		b.handleCheckTransactions(ctx, chatID, userID)

	default:
		msg := tgbotapi.NewMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.")
		msg.ReplyMarkup = GetMainMenu(hasAddress)
		b.API.Send(msg)
	}
}

func (b *Bot) handleCheckTransactions(ctx context.Context, chatID, userID int64) {
	user, err := b.userService.GetUser(ctx, userID)
	if err != nil || user == nil || user.DepositAddress == "" {
		msg := tgbotapi.NewMessage(chatID, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
		msg.ReplyMarkup = GetMainMenu(false)
		b.API.Send(msg)
		return
	}

	msg := tgbotapi.NewMessage(chatID, "üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –∞–¥—Ä–µ—Å–∞...")
	b.API.Send(msg)

	transactions, err := b.checkUserTransactions(ctx, user.DepositAddress)
	if err != nil {
		b.logger.Errorf("Error checking transactions: %v", err)
		msg := tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")
		msg.ReplyMarkup = GetMainMenu(true)
		b.API.Send(msg)
		return
	}

	if len(transactions) == 0 {
		msg := tgbotapi.NewMessage(chatID, "–ù–∞ –≤–∞—à–µ–º –∞–¥—Ä–µ—Å–µ –ø–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")
		msg.ReplyMarkup = GetMainMenu(true)
		b.API.Send(msg)
		return
	}

	response := "üìä –ù–∞–π–¥–µ–Ω—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n\n"
	for _, tx := range transactions {
		response += fmt.Sprintf("‚Ä¢ %.8f BTC - %s\n", tx.AmountBTC, tx.TxID)
	}

	msg = tgbotapi.NewMessage(chatID, response)
	msg.ReplyMarkup = GetMainMenu(true)
	b.API.Send(msg)
}

func (b *Bot) handleStart(ctx context.Context, chatID, userID int64, hasAddress bool) {
	user, err := b.userService.GetUser(ctx, userID)
	if err != nil {
		b.logger.Errorf("Failed to get user: %v", err)
	}

	welcomeText := "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º:"

	if user == nil || user.CardNumber == "" {
		welcomeText += "\n\n1. –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã"
		welcomeText += "\n2. –ó–∞—Ç–µ–º –ø–æ–ª—É—á–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"
	} else if !hasAddress {
		welcomeText += "\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"
	} else {
		welcomeText += "\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"
	}

	msg := tgbotapi.NewMessage(chatID, welcomeText)
	msg.ReplyMarkup = GetMainMenu(hasAddress)
	b.API.Send(msg)
}

func (b *Bot) handleAddressRequest(ctx context.Context, chatID, userID int64) {
	user, err := b.userService.GetUser(ctx, userID)
	if err != nil {
		b.logger.Errorf("Failed to get user: %v", err)
		b.API.Send(tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
		return
	}

	if user == nil || user.CardNumber == "" {
		msg := tgbotapi.NewMessage(chatID, "‚ùå –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã.\n\n"+
			"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üí≥ –£–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã' –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.")
		msg.ReplyMarkup = GetMainMenu(false)
		b.API.Send(msg)
		return
	}

	userWithAddress, err := b.userService.UpdateAddress(ctx, userID)
	if err != nil {
		b.logger.Errorf("Failed to get user address: %v", err)
		b.API.Send(tgbotapi.NewMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
		return
	}

	msgText := fmt.Sprintf(
		"–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:\n\n`%s`\n\n"+
			"–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ BTC —Ç–æ–ª—å–∫–æ –Ω–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å. –õ—é–±–æ–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–∞ –Ω–µ–≥–æ –±—É–¥–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–æ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.",
		userWithAddress.DepositAddress,
	)
	msg := tgbotapi.NewMessage(chatID, msgText)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = GetMainMenu(true)
	b.API.Send(msg)
}

func (b *Bot) HandleCardNumberInput(ctx context.Context, update tgbotapi.Update) {
	userID := update.Message.From.ID
	chatID := update.Message.Chat.ID

	user, err := b.userService.GetUser(ctx, userID)
	if err != nil {
		b.logger.Errorf("Failed to get user: %v", err)
		return
	}

	if user == nil {
		if err := b.userService.CreateUser(ctx, userID); err != nil {
			b.logger.Errorf("Failed to create user: %v", err)
			b.API.Send(tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
			return
		}
	}

	if err := b.userService.UpdateCardNumber(ctx, userID, update.Message.Text); err != nil {
		b.logger.Errorf("Failed to update card number: %v", err)
		b.API.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
		return
	}

	user, err = b.userService.GetUser(ctx, userID)
	if err != nil {
		b.logger.Errorf("Failed to get user: %v", err)
		return
	}

	hasAddress := user != nil && user.DepositAddress != ""

	b.setState(userID, stateDefault)
	msg := tgbotapi.NewMessage(chatID, "‚úÖ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
	msg.ReplyMarkup = GetMainMenu(hasAddress)
	b.API.Send(msg)
}
