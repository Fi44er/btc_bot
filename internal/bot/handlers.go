package bot

import (
	"context"
	"fmt"
	"strconv"
	"strings"

	"github.com/Fi44er/btc_bot/internal/models"
	"github.com/Fi44er/btc_bot/utils"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func (b *Bot) HandleUpdate(update tgbotapi.Update) {
	b.withUserCheck(func(ctx context.Context, update tgbotapi.Update, user *models.User) {
		text := update.Message.Text
		chatID := update.Message.Chat.ID
		userID := user.TelegramID

		b.logger.Infof("Processing message from user %d: %s", userID, text)

		userState := b.getUserState(userID)

		switch userState {
		case stateAwaitingCardNumber:
			b.HandleCardNumberInput(ctx, update, user)
			return
		case stateAwaitingWithdrawAmount:
			b.handleWithdrawAmount(ctx, chatID, user, text)
			return
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–æ–¥–µ–ª—å User –ø–æ–ª–µ IsAdmin, —á—Ç–æ–±—ã –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å b.isAdmin –ø–æ—Å—Ç–æ—è–Ω–Ω–æ
		user.IsAdmin = b.isAdmin(userID)

		switch text {
		case "/test_tx":
			b.handleTestTransaction(chatID, userID)
		case "/start":
			b.handleStart(ctx, chatID, user)
		case "üí∞ –ü–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è":
			b.handleAddressRequest(ctx, chatID, user)
		case "üí≥ –£–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã", "üí≥ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã":
			b.setState(userID, stateAwaitingCardNumber)
			// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –≤–≤–æ–¥–∞
			b.sendMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã:", tgbotapi.NewRemoveKeyboard(true))
		case "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏":
			b.handleCheckTransactions(ctx, chatID, userID)
		case "üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å":
			b.handleBalanceRequest(ctx, chatID, user)
		case "üí∏ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞":
			b.handleWithdrawRequest(ctx, chatID, user)
		case "üë®‚Äçüíª –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—ã–≤–æ–¥":
			if b.isAdmin(userID) {
				b.handleWithdrawalRequests(ctx, chatID, user)
			}
		default:
			b.sendMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.", GetMainMenu(user))
		}
	})(update)
}

func (b *Bot) handleStart(ctx context.Context, chatID int64, user *models.User) {
	welcomeText := "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º."
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
	b.sendMessage(chatID, welcomeText, GetMainMenu(user))
}

func (b *Bot) handleAddressRequest(ctx context.Context, chatID int64, user *models.User) {
	if user.CardNumber == "" {
		b.sendMessage(
			chatID,
			"‚ùå –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã.",
			GetMainMenu(user),
		)
		return
	}

	userWithAddress, err := b.service.UpdateUserWallet(ctx, user.TelegramID)
	if err != nil {
		b.logger.Errorf("Failed to get user address: %v", err)
		b.sendMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", GetMainMenu(user))
		return
	}

	msgText := fmt.Sprintf(
		"–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:\n\n`%s`\n\n"+
			"–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ BTC —Ç–æ–ª—å–∫–æ –Ω–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å. –õ—é–±–æ–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–∞ –Ω–µ–≥–æ –±—É–¥–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–æ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.",
		userWithAddress.SystemWallet.Address,
	)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
	b.sendMessage(chatID, msgText, GetMainMenu(userWithAddress))
}

// handleCallbackQuery —Ç–µ–ø–µ—Ä—å —è–≤–ª—è–µ—Ç—Å—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–æ–º –¥–ª—è –∫–æ–ª–±—ç–∫–æ–≤
func (b *Bot) handleCallbackQuery(callback *tgbotapi.CallbackQuery) {
	ctx := context.Background()
	user, err := b.service.GetUser(ctx, callback.From.ID)
	if err != nil || user == nil {
		b.logger.Errorf("Failed to get user for callback: %v", err)
		return
	}
	user.IsAdmin = b.isAdmin(user.TelegramID)

	switch {
	case strings.HasPrefix(callback.Data, "show_key:"):
		b.handleShowKeyCallback(ctx, callback, user)
	case strings.HasPrefix(callback.Data, "confirm_withdraw"), strings.HasPrefix(callback.Data, "cancel_withdraw"):
		b.handleUserWithdrawCallback(ctx, callback, user)
	case strings.HasPrefix(callback.Data, "admin_"):
		if user.IsAdmin {
			b.handleAdminWithdrawCallback(ctx, callback)
		}
	}
}

func (b *Bot) HandleCardNumberInput(ctx context.Context, update tgbotapi.Update, user *models.User) {
	chatID := update.Message.Chat.ID
	userID := user.TelegramID
	cardNumber := update.Message.Text

	if err := b.service.UpdateCardNumber(ctx, userID, cardNumber); err != nil {
		b.logger.Errorf("Failed to update card number: %v", err)
		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–∞–∂–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
		b.sendMessage(chatID, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", GetMainMenu(user))
		return
	}

	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	b.setState(userID, stateDefault)

	// –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–∫—É—â–µ–º –æ–±—ä–µ–∫—Ç–µ, —á—Ç–æ–±—ã –º–µ–Ω—é –±—ã–ª–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º
	user.CardNumber = cardNumber

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–ª–µ–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
	b.sendMessage(chatID, "‚úÖ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", nil)
	b.sendMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é:", GetMainMenu(user))
}

func (b *Bot) handleBalanceRequest(_ context.Context, chatID int64, user *models.User) {
	balance := utils.RoundTo(user.Balance, 8) // –£–≤–µ–ª–∏—á–∏–ª —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è BTC
	msgText := fmt.Sprintf("–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: %.8f RUB", balance)
	b.sendMessage(chatID, msgText, GetMainMenu(user))
}

// handleShowKeyCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫–∞–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
func (b *Bot) handleShowKeyCallback(ctx context.Context, callback *tgbotapi.CallbackQuery, user *models.User) {
	walletIDStr := strings.TrimPrefix(callback.Data, "show_key:")
	walletID, err := strconv.ParseInt(walletIDStr, 10, 64)
	if err != nil {
		b.logger.Errorf("Invalid wallet ID in callback: %v", err)
		return
	}

	wallet, err := b.service.GetWalletByID(ctx, walletID)
	if err != nil || wallet == nil {
		b.logger.Errorf("Failed to get wallet: %v", err)
		b.answerCallback(callback.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ—à–µ–ª–µ–∫.")
		return
	}

	response := fmt.Sprintf("üîê –î–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∞:\n\n–ê–¥—Ä–µ—Å: `%s`\n–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: `%s`", wallet.Address, wallet.PrivateKey)
	msg := tgbotapi.NewMessage(callback.Message.Chat.ID, response)
	msg.ParseMode = tgbotapi.ModeMarkdown
	b.API.Send(msg)

	// –£–±–∏—Ä–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
	edit := tgbotapi.NewEditMessageReplyMarkup(callback.Message.Chat.ID, callback.Message.MessageID, tgbotapi.InlineKeyboardMarkup{})
	b.API.Send(edit)

	b.answerCallback(callback.ID, "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –ø–æ–∫–∞–∑–∞–Ω.")
}
